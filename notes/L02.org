* RISC-V Assembly and Binary Notation

** any notes

- Registers
  - Many RISC variants exist, we only care MISC 32-bit
  - Register X0 is always x0
  - 32 bit = 1 word
  - each register is 32 bits
- Memory
  - 1 memory address <-> 1 byte in memory
    
** Operations

*** Computational

*format* : =oper dest, src1, src2=

- =add=, =sub=
- =slt=, =sltu= (Set Less Than)
- =and=, =or=, =xor=
- =sll= (Shift Logical Left), =srl=, =sra=

*加法溢出*: 在 mod 32 意义下的加法来看是自然的。

*Register Immediate 立即数操作*

hard-coded constant number

- =addi= (no =subi= here, because =addi x3, x1, -3= is enough. It's no need to reimplement another almost same operation)
- =slti=, =sltiu=
- =andi=, =ori=, =xori=
- =slli=, =srli=, =srai=

Example: =addi x3, x1, 3=

*** Loads and stores

*Address*: <base address, offset>

- base address is always stored in a register
- offset is a small constant
- **Format**: ={lw|sw} dest, offset(base Reg)=. Example: =lw x1, 0x4(x2)=
- lw(Load Word), sw(Store Word)

*** Control Flow

*format*: =comp src1, src2, label=

If the compare result is True, then go to the label branch.

- =beq= (Branch EQual) ==
- =bne= !=
- =bit= <
- =bye= >=
- =bltu= <
- =bgeu= >=

unconditional jump

- =jal= (unconditional Jump And Link): =jal x3, label=
- =jalr= (unconditional Jump via Register And Link): =jalr x3, 4(x1)=
  
** enconde the Instruction

1 instruction = 32 bits

*** bits

- Operation: 10 bits
- Register: 5 bits

** Pseudoinstruction

Example:

| pseudo              | equialent assembly  |
| =mv x2, x1=         | =addi x2, x1, 0=    |
| =ble x1, x2, label= | =bge x2, x1, label= |
| =beqz x1, label=    | =bge x2, x1, label= |
| =bnez x1, label=    | =bne x1, x0, label= |
